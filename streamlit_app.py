# -*- coding: utf-8 -*-
import os
import io
import tempfile
import pandas as pd
import streamlit as st

# –õ–æ–∫–∞–ª—å–Ω–∏–π –¥–≤–∏–≥—É–Ω –∑ –ª–æ–≥—ñ–∫–æ—é —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ç–∞ Telegram-–≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
import order_engine as oe

# ---------- UI CONFIG ----------
st.set_page_config(page_title="AI Beer Stock Manager", page_icon="üç∫", layout="wide")
st.title("üç∫ AI Beer Stock Manager ‚Äî Streamlit")
st.caption("–î–≤—ñ —Ç–æ—á–∫–∏ (–ë–æ–≥–æ–ª—é–±–æ–≤–∞ / –Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∞, 31–∞). –õ—ñ–º—ñ—Ç–∏ –¥—ñ–ª—è—Ç—å—Å—è –Ω–∞–≤–ø—ñ–ª, –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É CSV —Ç–∞ –≤ Telegram.")

# ---------- SIDEBAR SETTINGS ----------
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    out_dir = st.text_input("–ü–∞–ø–∫–∞ –¥–ª—è CSV (OUT_DIR)", value=os.getenv("OUT_DIR", "out"))
    dry_run = st.checkbox("DRY_RUN (—Ç—ñ–ª—å–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ, –±–µ–∑ TG)", value=True)
    tg_token = st.text_input("TELEGRAM_BOT_TOKEN", value=os.getenv("TELEGRAM_BOT_TOKEN", ""), type="password")
    tg_chat  = st.text_input("TELEGRAM_CHAT_ID", value=os.getenv("TELEGRAM_CHAT_ID", "555406850"))
    st.write("---")
    st.caption("–©–æ–± —Ä–µ–∞–ª—å–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤ Telegram ‚Äî –∑–Ω—ñ–º—ñ—Ç—å DRY_RUN, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ç–æ–∫–µ–Ω —ñ chat_id, —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤ Telegram¬ª.")

# ---------- INPUTS ----------
st.subheader("1) –í—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏")
c1, c2 = st.columns(2)
with c1:
    stock_file = st.file_uploader("Excel —ñ–∑ –∑–∞–ª–∏—à–∫–∞–º–∏ (export_limits.xlsx / .xls)", type=["xlsx", "xls"])
with c2:
    suppliers_file = st.file_uploader("suppliers.csv –∞–±–æ .xlsx/.xls", type=["csv", "xlsx", "xls"])

run_col, send_col = st.columns(2)
btn_run  = run_col.button("üî¢ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏")
btn_send = send_col.button("üöÄ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤ Telegram")

# ---------- HELPERS ----------
tmp_dir = tempfile.mkdtemp(prefix="beer_streamlit_")

def save_upload(file, name_hint):
    path = os.path.join(tmp_dir, name_hint)
    with open(path, "wb") as f:
        f.write(file.read())
    return path

# —Å—Ç–∞–Ω –º—ñ–∂ –∫–ª—ñ–∫–∞–º–∏
if "po_a_path" not in st.session_state:
    st.session_state.po_a_path = None
if "po_b_path" not in st.session_state:
    st.session_state.po_b_path = None
if "summary_text" not in st.session_state:
    st.session_state.summary_text = ""

def _fmt_num(x: float) -> str:
    try:
        xf = float(x)
        return f"{int(xf)}" if xf.is_integer() else f"{xf:.2f}"
    except Exception:
        return str(x)

def totals_text(df: pd.DataFrame) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—É–º–∞—Ä–Ω—ñ –æ–±—Å—è–≥–∏ (–ª/–∫–≥/—à—Ç) –ø–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—é."""
    if df.empty:
        return "0"
    sums = df.assign(unit=df["unit"].fillna("—à—Ç")).groupby("unit", dropna=False)["order_qty"].sum()
    prefer = ["–ª", "–∫–≥", "—à—Ç"]
    parts = [f"{_fmt_num(sums[u])} {u}" for u in prefer if u in sums and sums[u] > 0]
    for u, v in sums.items():
        if u not in prefer and v > 0:
            parts.append(f"{_fmt_num(v)} {u}")
    return ", ".join(parts) if parts else "0"

def top3_text(df: pd.DataFrame) -> str:
    if df.empty:
        return "‚Äî"
    x = df.sort_values("order_qty", ascending=False).head(3)
    return ", ".join(f"{r.product_name} ‚Äî {_fmt_num(r.order_qty)} {r.unit}" for r in x.itertuples())

def line_for_store(store_name: str, df_po: pd.DataFrame) -> str:
    suppliers = df_po["supplier_name"].nunique() if not df_po.empty else 0
    return (
        f"–ú–∞–≥–∞–∑–∏–Ω {store_name}: {len(df_po)} –ø–æ–∑–∏—Ü—ñ–π, "
        f"–ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤: {suppliers}, –ø—ñ–¥—Å—É–º–æ–∫: {totals_text(df_po)}. "
        f"–¢–æ–ø: {top3_text(df_po)}"
    )

def compute_and_show(stock_path: str, suppliers_path: str):
    # –ü—Ä–æ–∫–∏–¥—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ –º–æ–¥—É–ª—å
    oe.OUT_DIR = out_dir or "out"
    os.makedirs(oe.OUT_DIR, exist_ok=True)
    oe.DRY_RUN = 1 if dry_run else 0
    oe.TELEGRAM_BOT_TOKEN = tg_token or ""
    oe.TELEGRAM_CHAT_ID = tg_chat or "555406850"

    # 1) –ü–∞—Ä—Å–∏–º–æ –¥–∞–Ω—ñ
    df_stock = oe.read_stock_excel(stock_path)
    if suppliers_path.lower().endswith((".xls", ".xlsx")):
        df_sup_raw = oe.read_excel_any(suppliers_path, header=0)
    else:
        df_sup_raw = pd.read_csv(suppliers_path)
    df_sup = oe.load_suppliers(df_sup_raw)

    # 2) –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
    po_a, po_b = oe.compute_orders(df_stock, df_sup)

    # 3) –ó–±–µ—Ä–µ–≥—Ç–∏ CSV
    po_a_path = None
    po_b_path = None
    if not po_a.empty:
        po_a_path = os.path.join(oe.OUT_DIR, "PO_–ë–æ–≥–æ–ª—é–±–æ–≤–∞.csv")
        po_a.to_csv(po_a_path, index=False, encoding="utf-8-sig")
    if not po_b.empty:
        po_b_path = os.path.join(oe.OUT_DIR, "PO_–Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∞_31–∞.csv")
        po_b.to_csv(po_b_path, index=False, encoding="utf-8-sig")

    # 4) –ù–æ–≤–∏–π –ü–Ü–î–°–£–ú–û–ö (—Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ)
    summary = f"{line_for_store(oe.STORE_A_NAME, po_a)}\n{line_for_store(oe.STORE_B_NAME, po_b)}"
    st.session_state.summary_text = summary

    st.success("–ì–æ—Ç–æ–≤–æ. –ù–∏–∂—á–µ ‚Äî –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —ñ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.")
    st.code(summary)

    # 5) –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    if po_a_path:
        st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PO_–ë–æ–≥–æ–ª—é–±–æ–≤–∞.csv",
                           data=open(po_a_path, "rb").read(),
                           file_name="PO_–ë–æ–≥–æ–ª—é–±–æ–≤–∞.csv", mime="text/csv")
        st.dataframe(po_a, use_container_width=True)
        st.session_state.po_a_path = po_a_path
    else:
        st.info("–î–ª—è –º–∞–≥–∞–∑–∏–Ω—É –ë–æ–≥–æ–ª—é–±–æ–≤–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.")

    if po_b_path:
        st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PO_–Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∞_31–∞.csv",
                           data=open(po_b_path, "rb").read(),
                           file_name="PO_–Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∞_31–∞.csv", mime="text/csv")
        st.dataframe(po_b, use_container_width=True)
        st.session_state.po_b_path = po_b_path
    else:
        st.info("–î–ª—è –º–∞–≥–∞–∑–∏–Ω—É –Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∞, 31–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.")

# ---------- ACTIONS ----------
if btn_run:
    if not stock_file:
        st.error("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Excel —ñ–∑ –∑–∞–ª–∏—à–∫–∞–º–∏.")
    elif not suppliers_file:
        st.error("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ suppliers.csv/.xlsx.")
    else:
        try:
            stock_path = save_upload(stock_file, stock_file.name)
            suppliers_path = save_upload(suppliers_file, suppliers_file.name)
            compute_and_show(stock_path, suppliers_path)
        except Exception as e:
            st.exception(e)

if btn_send:
    if not st.session_state.summary_text:
        st.warning("–°–ø–µ—Ä—à—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏¬ª.")
    else:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏—Ç—å —É —Å–∞–π–¥–±–∞—Ä—ñ)
        oe.DRY_RUN = 1 if dry_run else 0
        oe.TELEGRAM_BOT_TOKEN = tg_token or ""
        oe.TELEGRAM_CHAT_ID = tg_chat or "555406850"

        try:
            from order_engine import tg_send_message, tg_send_document
            tg_send_message(f"<b>AI Beer Stock Manager</b>\n{st.session_state.summary_text}")

            if st.session_state.po_a_path:
                tg_send_document(st.session_state.po_a_path, caption="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>PO_–ë–æ–≥–æ–ª—é–±–æ–≤–∞.csv</code>")
            if st.session_state.po_b_path:
                tg_send_document(st.session_state.po_b_path, caption="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>PO_–Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∞_31–∞.csv</code>")

            if dry_run:
                st.info("DRY_RUN=1 ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞, –¥–æ Telegram –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è.")
            else:
                st.success("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram.")
        except Exception as e:
            st.exception(e)

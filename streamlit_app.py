# streamlit_app.py
import os
import pandas as pd
import streamlit as st
from app.stock_manager import build_purchase_order
from app.mailer import send_mail, build_html
from app.email_fetcher import fetch_inventory_from_email
import requests

st.set_page_config(page_title="AI Beer Stock Manager", layout="wide")
st.title("üç∫ AI Beer Stock Manager")

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ===
SUPPLIER_EMAIL = os.getenv("SUPPLIER_EMAIL", "")
DRY_RUN = (os.getenv("DRY_RUN", "1").strip() == "1")

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "")

def tg_notify(text: str):
    if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
        try:
            requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                          json={"chat_id": TELEGRAM_CHAT_ID, "text": text})
        except Exception:
            pass

# === UI: –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ ===
st.sidebar.header("–í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ (–ª–æ–∫–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç)")
sales_file = st.sidebar.file_uploader("sales.csv (date, sku, qty)", type=["csv"])
inventory_file = st.sidebar.file_uploader("inventory.csv (sku, name, stock)", type=["csv"])

colA, colB, colC = st.columns(3)
with colA:
    load_from_email = st.button("üì• –ü—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –∑ –ø–æ—à—Ç–∏ (Excel)")
with colB:
    calc_btn = st.button("üßÆ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
with colC:
    send_btn = st.button("‚úâÔ∏è –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É")

status = st.empty()
po_df = None
summary_text = ""

# === –ö—Ä–æ–∫ 1: –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä (–∞–±–æ –∑ UI, –∞–±–æ –∑ –ø–æ—à—Ç–∏) ===
inv_path = "sample_data/inventory.csv"  # –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π —à–ª—è—Ö, –∫—É–¥–∏ –ø–∏—Å–∞—Ç–∏–º–µ–º–æ
sales_path = "sample_data/sales.csv"    # —è–∫ —ñ —Ä–∞–Ω—ñ—à–µ

if load_from_email:
    try:
        inv_df = fetch_inventory_from_email(inv_path)
        status.success(f"‚úÖ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –ø–æ—à—Ç–∏ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {inv_path}. –†—è–¥–∫—ñ–≤: {len(inv_df)}")
        st.dataframe(inv_df.head(20), use_container_width=True)
    except Exception as e:
        status.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä —ñ–∑ –ø–æ—à—Ç–∏: {e}")

# –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ –ª–æ–∫–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏ ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö
if sales_file is not None:
    tmp_sales = "tmp_sales.csv"
    with open(tmp_sales, "wb") as f:
        f.write(sales_file.read())
    sales_path = tmp_sales

if inventory_file is not None:
    tmp_inv = "tmp_inventory.csv"
    with open(tmp_inv, "wb") as f:
        f.write(inventory_file.read())
    inv_path = tmp_inv

# === –ö—Ä–æ–∫ 2: —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ PO ===
if calc_btn:
    try:
        po_df, summary_text = build_purchase_order(sales_path, inv_path)
        st.subheader("üîé –ü—ñ–¥—Å—É–º–æ–∫")
        st.code(summary_text)
        st.subheader("üì¶ Purchase Order")
        st.dataframe(po_df, use_container_width=True)
        if po_df is None or po_df.empty:
            status.info("–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î ‚Äî –∑–∞–ø–∞—Å –¥–æ—Å—Ç–∞—Ç–Ω—ñ–π.")
        else:
            status.success("‚úÖ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ.")
    except Exception as e:
        status.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É: {e}")

# === –ö—Ä–æ–∫ 3: –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ª–∏—Å—Ç–∞ ===
if send_btn:
    try:
        # –Ø–∫—â–æ PO —â–µ –Ω–µ —Ä–∞—Ö—É–≤–∞–ª–∏ –≤ —Ü—ñ–π —Å–µ—Å—ñ—ó ‚Äî –ø–µ—Ä–µ—Ä–∞—Ö—É—î–º–æ
        if po_df is None:
            po_df, summary_text = build_purchase_order(sales_path, inv_path)

        subject = "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞–ø–∞—Å—ñ–≤ (AI Beer Stock Manager)"
        to_email = SUPPLIER_EMAIL or "kovalenko55555@gmail.com"

        result = send_mail(po_df, subject=subject, to_email=to_email, dry_run=DRY_RUN)
        html_preview = result.get("preview_html", build_html(po_df, subject))

        st.subheader("üìß –ü—Ä–µ–≤‚Äô—é –ª–∏—Å—Ç–∞")
        st.markdown(html_preview, unsafe_allow_html=True)

        if result.get("sent"):
            status.success(f"‚úÖ –õ–∏—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {to_email}")
            tg_notify("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É (–¥–∏–≤. –ø–æ—à—Ç—É).")
        else:
            status.warning("‚ÑπÔ∏è DRY_RUN –∞–±–æ –Ω–µ–º–∞—î SMTP-–∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ‚Äî –ø–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–µ–≤‚Äô—é –±–µ–∑ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.")
            tg_notify("‚ÑπÔ∏è –ü—Ä–µ–≤‚Äô—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ (DRY_RUN).")

    except Exception as e:
        status.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {e}")

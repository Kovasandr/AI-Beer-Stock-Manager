import os
import datetime as dt
import pandas as pd
import streamlit as st
from dotenv import load_dotenv

from app.stock_manager import build_purchase_order
from app.emailer import send_email

# –°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ AI-–ø–æ—è—Å–Ω–µ–Ω–Ω—è (–Ω–µ –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ –¥–ª—è –¥–µ–º–æ)
try:
    from app.ai_layer import generate_supplier_message
    HAS_AI = True
except Exception:
    HAS_AI = False

load_dotenv()
st.set_page_config(page_title="üç∫ AI Beer Stock Manager ‚Äì –ú–∞–π—Å—Ç–µ—Ä", layout="wide")
st.title("üç∫ AI Beer Stock Manager ‚Äî –ß–∞—Ç-–º–∞–π—Å—Ç–µ—Ä")

st.markdown(
    "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é, –≤–∫–∞–∂—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö (–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–µ –¥–∂–µ—Ä–µ–ª–æ), "
    "—ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å **–ó–∞–ø—É—Å—Ç–∏—Ç–∏**. –°–∏—Å—Ç–µ–º–∞ –≤—Å–µ –ø–æ—Ä–∞—Ö—É—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ."
)

# --------- –ö–†–û–ö 1: –©–û –ó–†–û–ë–ò–¢–ò?
task = st.radio(
    "–©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏?",
    ["–ê–≤—Ç–æ–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–≤—è—Ç–∞"],
    horizontal=True,
)

# --------- –ö–†–û–ö 2: –ó–í–Ü–î–ö–ò –î–ê–ù–Ü?
source = st.radio(
    "–ó–≤—ñ–¥–∫–∏ –±–µ—Ä–µ–º–æ –¥–∞–Ω—ñ?",
    ["–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV (–ø—Ä–æ—Å—Ç–æ)", "Gmail (—Å–∫–æ—Ä–æ)", "Google Sheets (—Å–∫–æ—Ä–æ)"],
    help="–î–ª—è –¥–µ–º–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV —ñ–∑ –ø—Ä–æ–¥–∞–∂–∞–º–∏ –π (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏) —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º."
)

# –ü–æ–ª—è –¥–ª—è Email-–æ–¥–µ—Ä–∂—É–≤–∞—á–∞
default_email = os.getenv("SUPPLIER_EMAIL", "")
report_email = st.text_input(
    "–ö—É–¥–∏ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (email)?",
    value=default_email,
    help="–ú–æ–∂–Ω–∞ –≤–∫–∞–∑–∞—Ç–∏ —Å–≤–æ—é –ø–æ—à—Ç—É –¥–ª—è —Ç–µ—Å—Ç—É. DRY_RUN=1 –¥—Ä—É–∫—É—î –ª–∏—Å—Ç —É –ª–æ–≥ –∑–∞–º—ñ—Å—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏."
)

# --------- –í–≤—ñ–¥ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞
sales_path = inv_path = None
if source.startswith("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"):
    st.subheader("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤")
    sales_file = st.file_uploader("–ü—Ä–æ–¥–∞–∂—ñ (sales.csv) ‚Äî –∫–æ–ª–æ–Ω–∫–∏: date, sku, qty", type=["csv"])
    inv_file = None
    if task == "–ê–≤—Ç–æ–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
        inv_file = st.file_uploader("–Ü–Ω–≤–µ–Ω—Ç–∞—Ä (inventory.csv) ‚Äî –∫–æ–ª–æ–Ω–∫–∏: sku, name, stock, ...", type=["csv"])

    # –ó–±–µ—Ä–µ–∂–µ–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ
    import tempfile
    if sales_file:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".csv") as sf:
            sf.write(sales_file.read())
            sales_path = sf.name
    if inv_file:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".csv") as inf:
            inf.write(inv_file.read())
            inv_path = inf.name

# --------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ü–†–û–ì–ù–û–ó–£ –ù–ê –°–í–Ø–¢–ê
holiday_date = None
holiday_boost = 0.0
if task == "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–≤—è—Ç–∞":
    col1, col2 = st.columns(2)
    with col1:
        holiday_date = st.date_input("–î–∞—Ç–∞ —Å–≤—è—Ç–∞", value=dt.date.today() + dt.timedelta(days=7))
    with col2:
        holiday_boost = st.slider("–û—á—ñ–∫—É–≤–∞–Ω–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –ø–æ–ø–∏—Ç—É –Ω–∞ —Å–≤—è—Ç–æ, %", 0, 200, 30) / 100.0

    st.caption("–ü—Ä–æ—Å—Ç–∏–π –ø—ñ–¥—Ö—ñ–¥: –±–µ—Ä–µ–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π –ø–æ–ø–∏—Ç –∑–∞ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è —Ç–∞ –¥–æ–¥–∞—î–º–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –Ω–∞ –¥–µ–Ω—å —Å–≤—è—Ç–∞.")

def forecast_next_7_days(sales_csv: str, holiday_dt: dt.date, boost: float) -> pd.DataFrame:
    """–ù–∞—ó–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑: —Å–µ—Ä–µ–¥–Ω—ñ–π –ø–æ–ø–∏—Ç –ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è + –ø—ñ–¥—Å–∏–ª–µ–Ω–Ω—è –Ω–∞ –¥–µ–Ω—å —Å–≤—è—Ç–∞."""
    df = pd.read_csv(sales_csv, parse_dates=["date"])
    df["dow"] = df["date"].dt.dayofweek
    # —Å–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–æ–¥–∞–∂ –∑–∞ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ SKU
    avg = df.groupby(["sku", "dow"])["qty"].mean().rename("avg_qty").reset_index()

    horizon = [dt.date.today() + dt.timedelta(days=i) for i in range(7)]
    rows = []
    for d in horizon:
        dow = d.weekday()
        day_avg = avg[avg["dow"] == dow][["sku", "avg_qty"]].copy()
        day_avg["date"] = d
        if holiday_dt == d:
            day_avg["avg_qty"] = (day_avg["avg_qty"] * (1.0 + boost)).round(2)
        rows.append(day_avg)
    out = pd.concat(rows).fillna({"avg_qty": 0})
    return out[["date", "sku", "avg_qty"]].rename(columns={"avg_qty": "forecast_qty"})

run = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏")

if run:
    if not sales_path:
        st.error("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –¥–∞–Ω—ñ –ø—Ä–æ –ø—Ä–æ–¥–∞–∂—ñ (sales.csv).")
        st.stop()

    if task == "–ê–≤—Ç–æ–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
        if not inv_path:
            st.error("–î–ª—è –∞–≤—Ç–æ–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–µ–Ω —â–µ inventory.csv.")
            st.stop()

        po_df, summary = build_purchase_order(sales_path, inv_path)
        st.subheader("–ü—ñ–¥—Å—É–º–æ–∫")
        st.code(summary["report_text"], language="markdown")
        st.subheader("–ü–æ–∑–∏—Ü—ñ—ó –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
        st.dataframe(po_df, use_container_width=True)

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç—ñ–ª–∞ –ª–∏—Å—Ç–∞: –∑–≤—ñ—Ç + (–æ–ø—Ü—ñ–π–Ω–æ) AI-–ø–æ—è—Å–Ω–µ–Ω–Ω—è
        ai_text = ""
        if HAS_AI:
            try:
                ai_text = "\n\n" + generate_supplier_message(po_df)
            except Exception as e:
                ai_text = f"\n\n–ü—Ä–∏–º—ñ—Ç–∫–∞: AI-–ø–æ—è—Å–Ω–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –¢–µ—Ö–Ω—ñ—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞: {e}"

        if st.button("‚úâÔ∏è –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É"):
            subject = f"PO: –ê–≤—Ç–æ–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {summary['date']} (–ø–æ–∑. {len(po_df)})"
            body = summary["report_text"] + ai_text
            send_email(subject=subject, body=body, to_email=report_email, po_df=po_df)
            st.success("–ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—à—Ç—É (–∞–±–æ –ª–æ–≥–∏, —è–∫—â–æ DRY_RUN=1).")

    else:  # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–≤—è—Ç–∞
        fc_df = forecast_next_7_days(sales_path, holiday_date, holiday_boost)
        st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω—ñ–≤")
        st.dataframe(fc_df, use_container_width=True)

        # –ó–≤–µ–¥–µ–Ω–Ω—è –ø–æ SKU –Ω–∞ –¥–µ–Ω—å —Å–≤—è—Ç–∞
        day_fc = fc_df[fc_df["date"] == pd.Timestamp(holiday_date)]
        lines = [f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {holiday_date} (boost {int(holiday_boost*100)}%):"]
        for r in day_fc.itertuples():
            lines.append(f"- {r.sku}: {r.forecast_qty:.1f} —à—Ç.")
        summary_text = "\n".join(lines)
        st.code(summary_text, language="markdown")

        if st.button("‚úâÔ∏è –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ email"):
            subject = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤ –Ω–∞ —Å–≤—è—Ç–æ {holiday_date}"
            body = summary_text
            # –ü—Ä–∏–∫—Ä—ñ–ø–∏–º–æ —É–≤–µ—Å—å 7-–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —è–∫ CSV
            send_email(subject=subject, body=body, to_email=report_email, po_df=fc_df.rename(columns={"forecast_qty":"qty"}))
            st.success("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (–∞–±–æ –Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ –≤ –ª–æ–≥, —è–∫—â–æ DRY_RUN=1).")

st.divider()
st.caption("–î–∂–µ—Ä–µ–ª–∞: –∑–∞—Ä–∞–∑ ‚Äî CSV. –î–∞–ª—ñ –ø—ñ–¥–∫–ª—é—á–∏–º–æ Gmail/Sheets, —â–æ–± –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –≤—Ä—É—á–Ω—É.")
